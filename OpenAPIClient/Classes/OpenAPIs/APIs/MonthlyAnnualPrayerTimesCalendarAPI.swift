//
// MonthlyAnnualPrayerTimesCalendarAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class MonthlyAnnualPrayerTimesCalendarAPI {

    /**
     * enum for parameter method
     */
    public enum Method_v1CalendarByAddressYearMonthGet: Double, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
        case _5 = 5
        case _6 = 6
        case _7 = 7
        case _8 = 8
        case _9 = 9
        case _10 = 10
        case _11 = 11
        case _12 = 12
        case _13 = 13
        case _14 = 14
        case _15 = 15
        case _16 = 16
        case _17 = 17
        case _18 = 18
        case _19 = 19
        case _20 = 20
        case _21 = 21
        case _22 = 22
        case _23 = 23
        case _99 = 99
    }

    /**
     * enum for parameter shafaq
     */
    public enum Shafaq_v1CalendarByAddressYearMonthGet: String, CaseIterable {
        case general = "general"
        case ahmer = "ahmer"
        case abyad = "abyad"
    }

    /**
     * enum for parameter school
     */
    public enum School_v1CalendarByAddressYearMonthGet: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
    }

    /**
     * enum for parameter midnightMode
     */
    public enum MidnightMode_v1CalendarByAddressYearMonthGet: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
    }

    /**
     * enum for parameter latitudeAdjustmentMethod
     */
    public enum LatitudeAdjustmentMethod_v1CalendarByAddressYearMonthGet: Int, CaseIterable {
        case _1 = 1
        case _2 = 2
        case _3 = 3
    }

    /**
     Prayer Times Calendar by address
     
     - parameter month: (path) A gregroian or hijri calendar month  
     - parameter year: (path) A gregorian or hijri calendar year  
     - parameter address: (query) An address string  
     - parameter x7xapikey: (query) An API key from https://7x.ax to geocode the address, city and country. If you do not provide one the response will mask the geocoded co-ordinates. (optional)
     - parameter annual: (query) If true, month parameter will be ignored and the calendar for the entire year will be returned  (optional, default to false)
     - parameter method: (query) A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-23 and 99, as specified below: &lt;br&gt;&lt;br&gt; Possible values: * &#x60;0&#x60; - Jafari / Shia Ithna-Ashari * &#x60;1&#x60; - University of Islamic Sciences, Karachi * &#x60;2&#x60; - Islamic Society of North America * &#x60;3&#x60; - Muslim World League * &#x60;4&#x60; - Umm Al-Qura University, Makkah * &#x60;5&#x60; - Egyptian General Authority of Survey * &#x60;7&#x60; - Institute of Geophysics, University of Tehran * &#x60;8&#x60; - Gulf Region * &#x60;9&#x60; - Kuwait * &#x60;10&#x60; - Qatar * &#x60;12&#x60; - Majlis Ugama Islam Singapura, Singapore * &#x60;12&#x60; - Union Organization islamic de France * &#x60;13&#x60; - Diyanet İşleri Başkanlığı, Turkey * &#x60;14&#x60; - Spiritual Administration of Muslims of Russia * &#x60;15&#x60; - Moonsighting Committee Worldwide (also requires shafaq parameter) * &#x60;16&#x60; - Dubai (experimental) * &#x60;17&#x60; - Jabatan Kemajuan Islam Malaysia (JAKIM) * &#x60;18&#x60; - Tunisia * &#x60;19&#x60; - Algeria * &#x60;20&#x60; - KEMENAG - Kementerian Agama Republik Indonesia * &#x60;21&#x60; - Morocco * &#x60;22&#x60; - Comunidade Islamica de Lisboa * &#x60;23&#x60; - Ministry of Awqaf, Islamic Affairs and Holy Places, Jordan * &#x60;99&#x60; - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)  (optional, default to ._0)
     - parameter shafaq: (query) Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are &#39;&#x60;general&#39;, &#39;ahmer&#39; and &#39;abyad&#39;  (optional, default to .general)
     - parameter tune: (query) Comma Separated String of integers to offset timings returned by the API in minutes. The order is &#x60;Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight&#x60;. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.  (optional)
     - parameter school: (query) Shafi (or the standard way) or Hanafi. &lt;br /&gt;&lt;br /&gt; Possible values: * &#x60;0&#x60; - Shafi * &#x60;1&#x60; - Hanafi  (optional, default to ._0)
     - parameter midnightMode: (query) Determines the method for calculating midnight &lt;br&gt;&lt;br&gt; Possible values: * &#x60;0&#x60; - Standard (Mid Sunset to Sunrise) * &#x60;1&#x60; - Jafari (Mid Sunset to Fajr)  (optional, default to ._0)
     - parameter latitudeAdjustmentMethod: (query) Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. &lt;br&gt;&lt;br&gt; Possible values: * &#x60;1&#x60; - Middle of the Night * &#x60;2&#x60; - One Seventh * &#x60;3&#x60; - Angle Based  (optional)
     - parameter adjustment: (query) Number of days to adjust hijri date(s).  (optional)
     - parameter iso8601: (query) Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56  (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1CalendarByAddressYearMonthGet(month: Double, year: Double, address: String, x7xapikey: String? = nil, annual: Bool? = nil, method: Method_v1CalendarByAddressYearMonthGet? = nil, shafaq: Shafaq_v1CalendarByAddressYearMonthGet? = nil, tune: String? = nil, school: School_v1CalendarByAddressYearMonthGet? = nil, midnightMode: MidnightMode_v1CalendarByAddressYearMonthGet? = nil, latitudeAdjustmentMethod: LatitudeAdjustmentMethod_v1CalendarByAddressYearMonthGet? = nil, adjustment: Int? = nil, iso8601: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CalendarResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return v1CalendarByAddressYearMonthGetWithRequestBuilder(month: month, year: year, address: address, x7xapikey: x7xapikey, annual: annual, method: method, shafaq: shafaq, tune: tune, school: school, midnightMode: midnightMode, latitudeAdjustmentMethod: latitudeAdjustmentMethod, adjustment: adjustment, iso8601: iso8601).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Prayer Times Calendar by address
     - GET /v1/calendarByAddress/{year}/{month}
     - Returns all prayer times for a specific calendar month at a particular address.
     - parameter month: (path) A gregroian or hijri calendar month  
     - parameter year: (path) A gregorian or hijri calendar year  
     - parameter address: (query) An address string  
     - parameter x7xapikey: (query) An API key from https://7x.ax to geocode the address, city and country. If you do not provide one the response will mask the geocoded co-ordinates. (optional)
     - parameter annual: (query) If true, month parameter will be ignored and the calendar for the entire year will be returned  (optional, default to false)
     - parameter method: (query) A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-23 and 99, as specified below: &lt;br&gt;&lt;br&gt; Possible values: * &#x60;0&#x60; - Jafari / Shia Ithna-Ashari * &#x60;1&#x60; - University of Islamic Sciences, Karachi * &#x60;2&#x60; - Islamic Society of North America * &#x60;3&#x60; - Muslim World League * &#x60;4&#x60; - Umm Al-Qura University, Makkah * &#x60;5&#x60; - Egyptian General Authority of Survey * &#x60;7&#x60; - Institute of Geophysics, University of Tehran * &#x60;8&#x60; - Gulf Region * &#x60;9&#x60; - Kuwait * &#x60;10&#x60; - Qatar * &#x60;12&#x60; - Majlis Ugama Islam Singapura, Singapore * &#x60;12&#x60; - Union Organization islamic de France * &#x60;13&#x60; - Diyanet İşleri Başkanlığı, Turkey * &#x60;14&#x60; - Spiritual Administration of Muslims of Russia * &#x60;15&#x60; - Moonsighting Committee Worldwide (also requires shafaq parameter) * &#x60;16&#x60; - Dubai (experimental) * &#x60;17&#x60; - Jabatan Kemajuan Islam Malaysia (JAKIM) * &#x60;18&#x60; - Tunisia * &#x60;19&#x60; - Algeria * &#x60;20&#x60; - KEMENAG - Kementerian Agama Republik Indonesia * &#x60;21&#x60; - Morocco * &#x60;22&#x60; - Comunidade Islamica de Lisboa * &#x60;23&#x60; - Ministry of Awqaf, Islamic Affairs and Holy Places, Jordan * &#x60;99&#x60; - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)  (optional, default to ._0)
     - parameter shafaq: (query) Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are &#39;&#x60;general&#39;, &#39;ahmer&#39; and &#39;abyad&#39;  (optional, default to .general)
     - parameter tune: (query) Comma Separated String of integers to offset timings returned by the API in minutes. The order is &#x60;Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight&#x60;. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.  (optional)
     - parameter school: (query) Shafi (or the standard way) or Hanafi. &lt;br /&gt;&lt;br /&gt; Possible values: * &#x60;0&#x60; - Shafi * &#x60;1&#x60; - Hanafi  (optional, default to ._0)
     - parameter midnightMode: (query) Determines the method for calculating midnight &lt;br&gt;&lt;br&gt; Possible values: * &#x60;0&#x60; - Standard (Mid Sunset to Sunrise) * &#x60;1&#x60; - Jafari (Mid Sunset to Fajr)  (optional, default to ._0)
     - parameter latitudeAdjustmentMethod: (query) Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. &lt;br&gt;&lt;br&gt; Possible values: * &#x60;1&#x60; - Middle of the Night * &#x60;2&#x60; - One Seventh * &#x60;3&#x60; - Angle Based  (optional)
     - parameter adjustment: (query) Number of days to adjust hijri date(s).  (optional)
     - parameter iso8601: (query) Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56  (optional, default to false)
     - returns: RequestBuilder<CalendarResponse> 
     */
    open class func v1CalendarByAddressYearMonthGetWithRequestBuilder(month: Double, year: Double, address: String, x7xapikey: String? = nil, annual: Bool? = nil, method: Method_v1CalendarByAddressYearMonthGet? = nil, shafaq: Shafaq_v1CalendarByAddressYearMonthGet? = nil, tune: String? = nil, school: School_v1CalendarByAddressYearMonthGet? = nil, midnightMode: MidnightMode_v1CalendarByAddressYearMonthGet? = nil, latitudeAdjustmentMethod: LatitudeAdjustmentMethod_v1CalendarByAddressYearMonthGet? = nil, adjustment: Int? = nil, iso8601: Bool? = nil) -> RequestBuilder<CalendarResponse> {
        var localVariablePath = "/v1/calendarByAddress/{year}/{month}"
        let monthPreEscape = "\(APIHelper.mapValueToPathItem(month))"
        let monthPostEscape = monthPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{month}", with: monthPostEscape, options: .literal, range: nil)
        let yearPreEscape = "\(APIHelper.mapValueToPathItem(year))"
        let yearPostEscape = yearPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{year}", with: yearPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "address": (wrappedValue: address.encodeToJSON(), isExplode: true),
            "x7xapikey": (wrappedValue: x7xapikey?.encodeToJSON(), isExplode: true),
            "annual": (wrappedValue: annual?.encodeToJSON(), isExplode: true),
            "method": (wrappedValue: method?.encodeToJSON(), isExplode: true),
            "shafaq": (wrappedValue: shafaq?.encodeToJSON(), isExplode: true),
            "tune": (wrappedValue: tune?.encodeToJSON(), isExplode: true),
            "school": (wrappedValue: school?.encodeToJSON(), isExplode: true),
            "midnightMode": (wrappedValue: midnightMode?.encodeToJSON(), isExplode: true),
            "latitudeAdjustmentMethod": (wrappedValue: latitudeAdjustmentMethod?.encodeToJSON(), isExplode: true),
            "adjustment": (wrappedValue: adjustment?.encodeToJSON(), isExplode: true),
            "iso8601": (wrappedValue: iso8601?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CalendarResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter method
     */
    public enum Method_v1CalendarByCityYearMonthGet: Double, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
        case _5 = 5
        case _6 = 6
        case _7 = 7
        case _8 = 8
        case _9 = 9
        case _10 = 10
        case _11 = 11
        case _12 = 12
        case _13 = 13
        case _14 = 14
        case _15 = 15
        case _16 = 16
        case _17 = 17
        case _18 = 18
        case _19 = 19
        case _20 = 20
        case _21 = 21
        case _22 = 22
        case _23 = 23
        case _99 = 99
    }

    /**
     * enum for parameter shafaq
     */
    public enum Shafaq_v1CalendarByCityYearMonthGet: String, CaseIterable {
        case general = "general"
        case ahmer = "ahmer"
        case abyad = "abyad"
    }

    /**
     * enum for parameter school
     */
    public enum School_v1CalendarByCityYearMonthGet: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
    }

    /**
     * enum for parameter midnightMode
     */
    public enum MidnightMode_v1CalendarByCityYearMonthGet: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
    }

    /**
     * enum for parameter latitudeAdjustmentMethod
     */
    public enum LatitudeAdjustmentMethod_v1CalendarByCityYearMonthGet: Int, CaseIterable {
        case _1 = 1
        case _2 = 2
        case _3 = 3
    }

    /**
     Prayer Times Calendar by city
     
     - parameter month: (path) A gregroian or hijri calendar month  
     - parameter year: (path) A gregorian or hijri calendar year  
     - parameter city: (query) A city name  
     - parameter country: (query) A country name or 2 character alpha ISO 3166 code  
     - parameter state: (query) State or province. A state name or abbreviation. Examples: Colorado / CO / Punjab / Bengal  (optional)
     - parameter x7xapikey: (query) An API key from https://7x.ax to geocode the address, city and country. If you do not provide one the response will mask the geocoded co-ordinates. (optional)
     - parameter annual: (query) If true, month parameter will be ignored and the calendar for the entire year will be returned  (optional, default to false)
     - parameter method: (query) A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-23 and 99, as specified below: &lt;br&gt;&lt;br&gt; Possible values: * &#x60;0&#x60; - Jafari / Shia Ithna-Ashari * &#x60;1&#x60; - University of Islamic Sciences, Karachi * &#x60;2&#x60; - Islamic Society of North America * &#x60;3&#x60; - Muslim World League * &#x60;4&#x60; - Umm Al-Qura University, Makkah * &#x60;5&#x60; - Egyptian General Authority of Survey * &#x60;7&#x60; - Institute of Geophysics, University of Tehran * &#x60;8&#x60; - Gulf Region * &#x60;9&#x60; - Kuwait * &#x60;10&#x60; - Qatar * &#x60;12&#x60; - Majlis Ugama Islam Singapura, Singapore * &#x60;12&#x60; - Union Organization islamic de France * &#x60;13&#x60; - Diyanet İşleri Başkanlığı, Turkey * &#x60;14&#x60; - Spiritual Administration of Muslims of Russia * &#x60;15&#x60; - Moonsighting Committee Worldwide (also requires shafaq parameter) * &#x60;16&#x60; - Dubai (experimental) * &#x60;17&#x60; - Jabatan Kemajuan Islam Malaysia (JAKIM) * &#x60;18&#x60; - Tunisia * &#x60;19&#x60; - Algeria * &#x60;20&#x60; - KEMENAG - Kementerian Agama Republik Indonesia * &#x60;21&#x60; - Morocco * &#x60;22&#x60; - Comunidade Islamica de Lisboa * &#x60;23&#x60; - Ministry of Awqaf, Islamic Affairs and Holy Places, Jordan * &#x60;99&#x60; - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)  (optional, default to ._0)
     - parameter shafaq: (query) Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are &#39;&#x60;general&#39;, &#39;ahmer&#39; and &#39;abyad&#39;  (optional, default to .general)
     - parameter tune: (query) Comma Separated String of integers to offset timings returned by the API in minutes. The order is &#x60;Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight&#x60;. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.  (optional)
     - parameter school: (query) Shafi (or the standard way) or Hanafi. &lt;br /&gt;&lt;br /&gt; Possible values: * &#x60;0&#x60; - Shafi * &#x60;1&#x60; - Hanafi  (optional, default to ._0)
     - parameter midnightMode: (query) Determines the method for calculating midnight &lt;br&gt;&lt;br&gt; Possible values: * &#x60;0&#x60; - Standard (Mid Sunset to Sunrise) * &#x60;1&#x60; - Jafari (Mid Sunset to Fajr)  (optional, default to ._0)
     - parameter latitudeAdjustmentMethod: (query) Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. &lt;br&gt;&lt;br&gt; Possible values: * &#x60;1&#x60; - Middle of the Night * &#x60;2&#x60; - One Seventh * &#x60;3&#x60; - Angle Based  (optional)
     - parameter adjustment: (query) Number of days to adjust hijri date(s).  (optional)
     - parameter iso8601: (query) Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56  (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1CalendarByCityYearMonthGet(month: Double, year: Double, city: String, country: String, state: String? = nil, x7xapikey: String? = nil, annual: Bool? = nil, method: Method_v1CalendarByCityYearMonthGet? = nil, shafaq: Shafaq_v1CalendarByCityYearMonthGet? = nil, tune: String? = nil, school: School_v1CalendarByCityYearMonthGet? = nil, midnightMode: MidnightMode_v1CalendarByCityYearMonthGet? = nil, latitudeAdjustmentMethod: LatitudeAdjustmentMethod_v1CalendarByCityYearMonthGet? = nil, adjustment: Int? = nil, iso8601: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CalendarResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return v1CalendarByCityYearMonthGetWithRequestBuilder(month: month, year: year, city: city, country: country, state: state, x7xapikey: x7xapikey, annual: annual, method: method, shafaq: shafaq, tune: tune, school: school, midnightMode: midnightMode, latitudeAdjustmentMethod: latitudeAdjustmentMethod, adjustment: adjustment, iso8601: iso8601).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Prayer Times Calendar by city
     - GET /v1/calendarByCity/{year}/{month}
     - Returns all prayer times for a specific calendar month by City.
     - parameter month: (path) A gregroian or hijri calendar month  
     - parameter year: (path) A gregorian or hijri calendar year  
     - parameter city: (query) A city name  
     - parameter country: (query) A country name or 2 character alpha ISO 3166 code  
     - parameter state: (query) State or province. A state name or abbreviation. Examples: Colorado / CO / Punjab / Bengal  (optional)
     - parameter x7xapikey: (query) An API key from https://7x.ax to geocode the address, city and country. If you do not provide one the response will mask the geocoded co-ordinates. (optional)
     - parameter annual: (query) If true, month parameter will be ignored and the calendar for the entire year will be returned  (optional, default to false)
     - parameter method: (query) A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-23 and 99, as specified below: &lt;br&gt;&lt;br&gt; Possible values: * &#x60;0&#x60; - Jafari / Shia Ithna-Ashari * &#x60;1&#x60; - University of Islamic Sciences, Karachi * &#x60;2&#x60; - Islamic Society of North America * &#x60;3&#x60; - Muslim World League * &#x60;4&#x60; - Umm Al-Qura University, Makkah * &#x60;5&#x60; - Egyptian General Authority of Survey * &#x60;7&#x60; - Institute of Geophysics, University of Tehran * &#x60;8&#x60; - Gulf Region * &#x60;9&#x60; - Kuwait * &#x60;10&#x60; - Qatar * &#x60;12&#x60; - Majlis Ugama Islam Singapura, Singapore * &#x60;12&#x60; - Union Organization islamic de France * &#x60;13&#x60; - Diyanet İşleri Başkanlığı, Turkey * &#x60;14&#x60; - Spiritual Administration of Muslims of Russia * &#x60;15&#x60; - Moonsighting Committee Worldwide (also requires shafaq parameter) * &#x60;16&#x60; - Dubai (experimental) * &#x60;17&#x60; - Jabatan Kemajuan Islam Malaysia (JAKIM) * &#x60;18&#x60; - Tunisia * &#x60;19&#x60; - Algeria * &#x60;20&#x60; - KEMENAG - Kementerian Agama Republik Indonesia * &#x60;21&#x60; - Morocco * &#x60;22&#x60; - Comunidade Islamica de Lisboa * &#x60;23&#x60; - Ministry of Awqaf, Islamic Affairs and Holy Places, Jordan * &#x60;99&#x60; - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)  (optional, default to ._0)
     - parameter shafaq: (query) Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are &#39;&#x60;general&#39;, &#39;ahmer&#39; and &#39;abyad&#39;  (optional, default to .general)
     - parameter tune: (query) Comma Separated String of integers to offset timings returned by the API in minutes. The order is &#x60;Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight&#x60;. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.  (optional)
     - parameter school: (query) Shafi (or the standard way) or Hanafi. &lt;br /&gt;&lt;br /&gt; Possible values: * &#x60;0&#x60; - Shafi * &#x60;1&#x60; - Hanafi  (optional, default to ._0)
     - parameter midnightMode: (query) Determines the method for calculating midnight &lt;br&gt;&lt;br&gt; Possible values: * &#x60;0&#x60; - Standard (Mid Sunset to Sunrise) * &#x60;1&#x60; - Jafari (Mid Sunset to Fajr)  (optional, default to ._0)
     - parameter latitudeAdjustmentMethod: (query) Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. &lt;br&gt;&lt;br&gt; Possible values: * &#x60;1&#x60; - Middle of the Night * &#x60;2&#x60; - One Seventh * &#x60;3&#x60; - Angle Based  (optional)
     - parameter adjustment: (query) Number of days to adjust hijri date(s).  (optional)
     - parameter iso8601: (query) Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56  (optional, default to false)
     - returns: RequestBuilder<CalendarResponse> 
     */
    open class func v1CalendarByCityYearMonthGetWithRequestBuilder(month: Double, year: Double, city: String, country: String, state: String? = nil, x7xapikey: String? = nil, annual: Bool? = nil, method: Method_v1CalendarByCityYearMonthGet? = nil, shafaq: Shafaq_v1CalendarByCityYearMonthGet? = nil, tune: String? = nil, school: School_v1CalendarByCityYearMonthGet? = nil, midnightMode: MidnightMode_v1CalendarByCityYearMonthGet? = nil, latitudeAdjustmentMethod: LatitudeAdjustmentMethod_v1CalendarByCityYearMonthGet? = nil, adjustment: Int? = nil, iso8601: Bool? = nil) -> RequestBuilder<CalendarResponse> {
        var localVariablePath = "/v1/calendarByCity/{year}/{month}"
        let monthPreEscape = "\(APIHelper.mapValueToPathItem(month))"
        let monthPostEscape = monthPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{month}", with: monthPostEscape, options: .literal, range: nil)
        let yearPreEscape = "\(APIHelper.mapValueToPathItem(year))"
        let yearPostEscape = yearPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{year}", with: yearPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "city": (wrappedValue: city.encodeToJSON(), isExplode: true),
            "country": (wrappedValue: country.encodeToJSON(), isExplode: true),
            "state": (wrappedValue: state?.encodeToJSON(), isExplode: true),
            "x7xapikey": (wrappedValue: x7xapikey?.encodeToJSON(), isExplode: true),
            "annual": (wrappedValue: annual?.encodeToJSON(), isExplode: true),
            "method": (wrappedValue: method?.encodeToJSON(), isExplode: true),
            "shafaq": (wrappedValue: shafaq?.encodeToJSON(), isExplode: true),
            "tune": (wrappedValue: tune?.encodeToJSON(), isExplode: true),
            "school": (wrappedValue: school?.encodeToJSON(), isExplode: true),
            "midnightMode": (wrappedValue: midnightMode?.encodeToJSON(), isExplode: true),
            "latitudeAdjustmentMethod": (wrappedValue: latitudeAdjustmentMethod?.encodeToJSON(), isExplode: true),
            "adjustment": (wrappedValue: adjustment?.encodeToJSON(), isExplode: true),
            "iso8601": (wrappedValue: iso8601?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CalendarResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter method
     */
    public enum Method_v1CalendarYearMonthGet: Double, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
        case _5 = 5
        case _6 = 6
        case _7 = 7
        case _8 = 8
        case _9 = 9
        case _10 = 10
        case _11 = 11
        case _12 = 12
        case _13 = 13
        case _14 = 14
        case _15 = 15
        case _16 = 16
        case _17 = 17
        case _18 = 18
        case _19 = 19
        case _20 = 20
        case _21 = 21
        case _22 = 22
        case _23 = 23
        case _99 = 99
    }

    /**
     * enum for parameter shafaq
     */
    public enum Shafaq_v1CalendarYearMonthGet: String, CaseIterable {
        case general = "general"
        case ahmer = "ahmer"
        case abyad = "abyad"
    }

    /**
     * enum for parameter school
     */
    public enum School_v1CalendarYearMonthGet: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
    }

    /**
     * enum for parameter midnightMode
     */
    public enum MidnightMode_v1CalendarYearMonthGet: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
    }

    /**
     * enum for parameter latitudeAdjustmentMethod
     */
    public enum LatitudeAdjustmentMethod_v1CalendarYearMonthGet: Int, CaseIterable {
        case _1 = 1
        case _2 = 2
        case _3 = 3
    }

    /**
     Prayer Times Calendar
     
     - parameter month: (path) A gregroian or hijri calendar month  
     - parameter year: (path) A gregorian or hijri calendar year  
     - parameter latitude: (query) The decimal value for the latitude co-ordinate of the location you want the time computed for.  
     - parameter longitude: (query) The decimal value for the longitude co-ordinate of the location you want the time computed for.  
     - parameter annual: (query) If true, month parameter will be ignored and the calendar for the entire year will be returned  (optional, default to false)
     - parameter method: (query) A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-23 and 99, as specified below: &lt;br&gt;&lt;br&gt; Possible values: * &#x60;0&#x60; - Jafari / Shia Ithna-Ashari * &#x60;1&#x60; - University of Islamic Sciences, Karachi * &#x60;2&#x60; - Islamic Society of North America * &#x60;3&#x60; - Muslim World League * &#x60;4&#x60; - Umm Al-Qura University, Makkah * &#x60;5&#x60; - Egyptian General Authority of Survey * &#x60;7&#x60; - Institute of Geophysics, University of Tehran * &#x60;8&#x60; - Gulf Region * &#x60;9&#x60; - Kuwait * &#x60;10&#x60; - Qatar * &#x60;12&#x60; - Majlis Ugama Islam Singapura, Singapore * &#x60;12&#x60; - Union Organization islamic de France * &#x60;13&#x60; - Diyanet İşleri Başkanlığı, Turkey * &#x60;14&#x60; - Spiritual Administration of Muslims of Russia * &#x60;15&#x60; - Moonsighting Committee Worldwide (also requires shafaq parameter) * &#x60;16&#x60; - Dubai (experimental) * &#x60;17&#x60; - Jabatan Kemajuan Islam Malaysia (JAKIM) * &#x60;18&#x60; - Tunisia * &#x60;19&#x60; - Algeria * &#x60;20&#x60; - KEMENAG - Kementerian Agama Republik Indonesia * &#x60;21&#x60; - Morocco * &#x60;22&#x60; - Comunidade Islamica de Lisboa * &#x60;23&#x60; - Ministry of Awqaf, Islamic Affairs and Holy Places, Jordan * &#x60;99&#x60; - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)  (optional, default to ._0)
     - parameter shafaq: (query) Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are &#39;&#x60;general&#39;, &#39;ahmer&#39; and &#39;abyad&#39;  (optional, default to .general)
     - parameter tune: (query) Comma Separated String of integers to offset timings returned by the API in minutes. The order is &#x60;Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight&#x60;. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.  (optional)
     - parameter school: (query) Shafi (or the standard way) or Hanafi. &lt;br /&gt;&lt;br /&gt; Possible values: * &#x60;0&#x60; - Shafi * &#x60;1&#x60; - Hanafi  (optional, default to ._0)
     - parameter midnightMode: (query) Determines the method for calculating midnight &lt;br&gt;&lt;br&gt; Possible values: * &#x60;0&#x60; - Standard (Mid Sunset to Sunrise) * &#x60;1&#x60; - Jafari (Mid Sunset to Fajr)  (optional, default to ._0)
     - parameter timezonestring: (query) A valid timezone name as specified on [https://php.net/manual/en/timezones.php](https://php.net/manual/en/timezones.php). &lt;br&gt; *If you do not specify this, we&#39;ll calcuate it using the co-ordinates you provide.*  (optional)
     - parameter latitudeAdjustmentMethod: (query) Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. &lt;br&gt;&lt;br&gt; Possible values: * &#x60;1&#x60; - Middle of the Night * &#x60;2&#x60; - One Seventh * &#x60;3&#x60; - Angle Based  (optional)
     - parameter adjustment: (query) Number of days to adjust hijri date(s).  (optional)
     - parameter iso8601: (query) Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56  (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1CalendarYearMonthGet(month: Double, year: Double, latitude: Double, longitude: Double, annual: Bool? = nil, method: Method_v1CalendarYearMonthGet? = nil, shafaq: Shafaq_v1CalendarYearMonthGet? = nil, tune: String? = nil, school: School_v1CalendarYearMonthGet? = nil, midnightMode: MidnightMode_v1CalendarYearMonthGet? = nil, timezonestring: String? = nil, latitudeAdjustmentMethod: LatitudeAdjustmentMethod_v1CalendarYearMonthGet? = nil, adjustment: Int? = nil, iso8601: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CalendarResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return v1CalendarYearMonthGetWithRequestBuilder(month: month, year: year, latitude: latitude, longitude: longitude, annual: annual, method: method, shafaq: shafaq, tune: tune, school: school, midnightMode: midnightMode, timezonestring: timezonestring, latitudeAdjustmentMethod: latitudeAdjustmentMethod, adjustment: adjustment, iso8601: iso8601).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Prayer Times Calendar
     - GET /v1/calendar/{year}/{month}
     - Returns all prayer times for a specific calendar month.
     - parameter month: (path) A gregroian or hijri calendar month  
     - parameter year: (path) A gregorian or hijri calendar year  
     - parameter latitude: (query) The decimal value for the latitude co-ordinate of the location you want the time computed for.  
     - parameter longitude: (query) The decimal value for the longitude co-ordinate of the location you want the time computed for.  
     - parameter annual: (query) If true, month parameter will be ignored and the calendar for the entire year will be returned  (optional, default to false)
     - parameter method: (query) A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-23 and 99, as specified below: &lt;br&gt;&lt;br&gt; Possible values: * &#x60;0&#x60; - Jafari / Shia Ithna-Ashari * &#x60;1&#x60; - University of Islamic Sciences, Karachi * &#x60;2&#x60; - Islamic Society of North America * &#x60;3&#x60; - Muslim World League * &#x60;4&#x60; - Umm Al-Qura University, Makkah * &#x60;5&#x60; - Egyptian General Authority of Survey * &#x60;7&#x60; - Institute of Geophysics, University of Tehran * &#x60;8&#x60; - Gulf Region * &#x60;9&#x60; - Kuwait * &#x60;10&#x60; - Qatar * &#x60;12&#x60; - Majlis Ugama Islam Singapura, Singapore * &#x60;12&#x60; - Union Organization islamic de France * &#x60;13&#x60; - Diyanet İşleri Başkanlığı, Turkey * &#x60;14&#x60; - Spiritual Administration of Muslims of Russia * &#x60;15&#x60; - Moonsighting Committee Worldwide (also requires shafaq parameter) * &#x60;16&#x60; - Dubai (experimental) * &#x60;17&#x60; - Jabatan Kemajuan Islam Malaysia (JAKIM) * &#x60;18&#x60; - Tunisia * &#x60;19&#x60; - Algeria * &#x60;20&#x60; - KEMENAG - Kementerian Agama Republik Indonesia * &#x60;21&#x60; - Morocco * &#x60;22&#x60; - Comunidade Islamica de Lisboa * &#x60;23&#x60; - Ministry of Awqaf, Islamic Affairs and Holy Places, Jordan * &#x60;99&#x60; - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)  (optional, default to ._0)
     - parameter shafaq: (query) Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are &#39;&#x60;general&#39;, &#39;ahmer&#39; and &#39;abyad&#39;  (optional, default to .general)
     - parameter tune: (query) Comma Separated String of integers to offset timings returned by the API in minutes. The order is &#x60;Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight&#x60;. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.  (optional)
     - parameter school: (query) Shafi (or the standard way) or Hanafi. &lt;br /&gt;&lt;br /&gt; Possible values: * &#x60;0&#x60; - Shafi * &#x60;1&#x60; - Hanafi  (optional, default to ._0)
     - parameter midnightMode: (query) Determines the method for calculating midnight &lt;br&gt;&lt;br&gt; Possible values: * &#x60;0&#x60; - Standard (Mid Sunset to Sunrise) * &#x60;1&#x60; - Jafari (Mid Sunset to Fajr)  (optional, default to ._0)
     - parameter timezonestring: (query) A valid timezone name as specified on [https://php.net/manual/en/timezones.php](https://php.net/manual/en/timezones.php). &lt;br&gt; *If you do not specify this, we&#39;ll calcuate it using the co-ordinates you provide.*  (optional)
     - parameter latitudeAdjustmentMethod: (query) Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. &lt;br&gt;&lt;br&gt; Possible values: * &#x60;1&#x60; - Middle of the Night * &#x60;2&#x60; - One Seventh * &#x60;3&#x60; - Angle Based  (optional)
     - parameter adjustment: (query) Number of days to adjust hijri date(s).  (optional)
     - parameter iso8601: (query) Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56  (optional, default to false)
     - returns: RequestBuilder<CalendarResponse> 
     */
    open class func v1CalendarYearMonthGetWithRequestBuilder(month: Double, year: Double, latitude: Double, longitude: Double, annual: Bool? = nil, method: Method_v1CalendarYearMonthGet? = nil, shafaq: Shafaq_v1CalendarYearMonthGet? = nil, tune: String? = nil, school: School_v1CalendarYearMonthGet? = nil, midnightMode: MidnightMode_v1CalendarYearMonthGet? = nil, timezonestring: String? = nil, latitudeAdjustmentMethod: LatitudeAdjustmentMethod_v1CalendarYearMonthGet? = nil, adjustment: Int? = nil, iso8601: Bool? = nil) -> RequestBuilder<CalendarResponse> {
        var localVariablePath = "/v1/calendar/{year}/{month}"
        let monthPreEscape = "\(APIHelper.mapValueToPathItem(month))"
        let monthPostEscape = monthPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{month}", with: monthPostEscape, options: .literal, range: nil)
        let yearPreEscape = "\(APIHelper.mapValueToPathItem(year))"
        let yearPostEscape = yearPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{year}", with: yearPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "latitude": (wrappedValue: latitude.encodeToJSON(), isExplode: true),
            "longitude": (wrappedValue: longitude.encodeToJSON(), isExplode: true),
            "annual": (wrappedValue: annual?.encodeToJSON(), isExplode: true),
            "method": (wrappedValue: method?.encodeToJSON(), isExplode: true),
            "shafaq": (wrappedValue: shafaq?.encodeToJSON(), isExplode: true),
            "tune": (wrappedValue: tune?.encodeToJSON(), isExplode: true),
            "school": (wrappedValue: school?.encodeToJSON(), isExplode: true),
            "midnightMode": (wrappedValue: midnightMode?.encodeToJSON(), isExplode: true),
            "timezonestring": (wrappedValue: timezonestring?.encodeToJSON(), isExplode: true),
            "latitudeAdjustmentMethod": (wrappedValue: latitudeAdjustmentMethod?.encodeToJSON(), isExplode: true),
            "adjustment": (wrappedValue: adjustment?.encodeToJSON(), isExplode: true),
            "iso8601": (wrappedValue: iso8601?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CalendarResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter method
     */
    public enum Method_v1HijriCalendarByAddressYearMonthGet: Double, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
        case _5 = 5
        case _6 = 6
        case _7 = 7
        case _8 = 8
        case _9 = 9
        case _10 = 10
        case _11 = 11
        case _12 = 12
        case _13 = 13
        case _14 = 14
        case _15 = 15
        case _16 = 16
        case _17 = 17
        case _18 = 18
        case _19 = 19
        case _20 = 20
        case _21 = 21
        case _22 = 22
        case _23 = 23
        case _99 = 99
    }

    /**
     * enum for parameter shafaq
     */
    public enum Shafaq_v1HijriCalendarByAddressYearMonthGet: String, CaseIterable {
        case general = "general"
        case ahmer = "ahmer"
        case abyad = "abyad"
    }

    /**
     * enum for parameter school
     */
    public enum School_v1HijriCalendarByAddressYearMonthGet: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
    }

    /**
     * enum for parameter midnightMode
     */
    public enum MidnightMode_v1HijriCalendarByAddressYearMonthGet: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
    }

    /**
     * enum for parameter latitudeAdjustmentMethod
     */
    public enum LatitudeAdjustmentMethod_v1HijriCalendarByAddressYearMonthGet: Int, CaseIterable {
        case _1 = 1
        case _2 = 2
        case _3 = 3
    }

    /**
     Prayer Times Hijri Calendar by address
     
     - parameter month: (path) A gregroian or hijri calendar month  
     - parameter year: (path) A gregorian or hijri calendar year  
     - parameter address: (query) An address string  
     - parameter x7xapikey: (query) An API key from https://7x.ax to geocode the address, city and country. If you do not provide one the response will mask the geocoded co-ordinates. (optional)
     - parameter annual: (query) If true, month parameter will be ignored and the calendar for the entire year will be returned  (optional, default to false)
     - parameter method: (query) A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-23 and 99, as specified below: &lt;br&gt;&lt;br&gt; Possible values: * &#x60;0&#x60; - Jafari / Shia Ithna-Ashari * &#x60;1&#x60; - University of Islamic Sciences, Karachi * &#x60;2&#x60; - Islamic Society of North America * &#x60;3&#x60; - Muslim World League * &#x60;4&#x60; - Umm Al-Qura University, Makkah * &#x60;5&#x60; - Egyptian General Authority of Survey * &#x60;7&#x60; - Institute of Geophysics, University of Tehran * &#x60;8&#x60; - Gulf Region * &#x60;9&#x60; - Kuwait * &#x60;10&#x60; - Qatar * &#x60;12&#x60; - Majlis Ugama Islam Singapura, Singapore * &#x60;12&#x60; - Union Organization islamic de France * &#x60;13&#x60; - Diyanet İşleri Başkanlığı, Turkey * &#x60;14&#x60; - Spiritual Administration of Muslims of Russia * &#x60;15&#x60; - Moonsighting Committee Worldwide (also requires shafaq parameter) * &#x60;16&#x60; - Dubai (experimental) * &#x60;17&#x60; - Jabatan Kemajuan Islam Malaysia (JAKIM) * &#x60;18&#x60; - Tunisia * &#x60;19&#x60; - Algeria * &#x60;20&#x60; - KEMENAG - Kementerian Agama Republik Indonesia * &#x60;21&#x60; - Morocco * &#x60;22&#x60; - Comunidade Islamica de Lisboa * &#x60;23&#x60; - Ministry of Awqaf, Islamic Affairs and Holy Places, Jordan * &#x60;99&#x60; - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)  (optional, default to ._0)
     - parameter shafaq: (query) Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are &#39;&#x60;general&#39;, &#39;ahmer&#39; and &#39;abyad&#39;  (optional, default to .general)
     - parameter tune: (query) Comma Separated String of integers to offset timings returned by the API in minutes. The order is &#x60;Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight&#x60;. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.  (optional)
     - parameter school: (query) Shafi (or the standard way) or Hanafi. &lt;br /&gt;&lt;br /&gt; Possible values: * &#x60;0&#x60; - Shafi * &#x60;1&#x60; - Hanafi  (optional, default to ._0)
     - parameter midnightMode: (query) Determines the method for calculating midnight &lt;br&gt;&lt;br&gt; Possible values: * &#x60;0&#x60; - Standard (Mid Sunset to Sunrise) * &#x60;1&#x60; - Jafari (Mid Sunset to Fajr)  (optional, default to ._0)
     - parameter timezonestring: (query) A valid timezone name as specified on [https://php.net/manual/en/timezones.php](https://php.net/manual/en/timezones.php). &lt;br&gt; *If you do not specify this, we&#39;ll calcuate it using the co-ordinates you provide.*  (optional)
     - parameter latitudeAdjustmentMethod: (query) Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. &lt;br&gt;&lt;br&gt; Possible values: * &#x60;1&#x60; - Middle of the Night * &#x60;2&#x60; - One Seventh * &#x60;3&#x60; - Angle Based  (optional)
     - parameter adjustment: (query) Number of days to adjust hijri date(s).  (optional)
     - parameter iso8601: (query) Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56  (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1HijriCalendarByAddressYearMonthGet(month: Double, year: Double, address: String, x7xapikey: String? = nil, annual: Bool? = nil, method: Method_v1HijriCalendarByAddressYearMonthGet? = nil, shafaq: Shafaq_v1HijriCalendarByAddressYearMonthGet? = nil, tune: String? = nil, school: School_v1HijriCalendarByAddressYearMonthGet? = nil, midnightMode: MidnightMode_v1HijriCalendarByAddressYearMonthGet? = nil, timezonestring: String? = nil, latitudeAdjustmentMethod: LatitudeAdjustmentMethod_v1HijriCalendarByAddressYearMonthGet? = nil, adjustment: Int? = nil, iso8601: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CalendarResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return v1HijriCalendarByAddressYearMonthGetWithRequestBuilder(month: month, year: year, address: address, x7xapikey: x7xapikey, annual: annual, method: method, shafaq: shafaq, tune: tune, school: school, midnightMode: midnightMode, timezonestring: timezonestring, latitudeAdjustmentMethod: latitudeAdjustmentMethod, adjustment: adjustment, iso8601: iso8601).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Prayer Times Hijri Calendar by address
     - GET /v1/hijriCalendarByAddress/{year}/{month}
     - Returns all prayer times for a specific Hijri calendar month at a particular address.
     - parameter month: (path) A gregroian or hijri calendar month  
     - parameter year: (path) A gregorian or hijri calendar year  
     - parameter address: (query) An address string  
     - parameter x7xapikey: (query) An API key from https://7x.ax to geocode the address, city and country. If you do not provide one the response will mask the geocoded co-ordinates. (optional)
     - parameter annual: (query) If true, month parameter will be ignored and the calendar for the entire year will be returned  (optional, default to false)
     - parameter method: (query) A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-23 and 99, as specified below: &lt;br&gt;&lt;br&gt; Possible values: * &#x60;0&#x60; - Jafari / Shia Ithna-Ashari * &#x60;1&#x60; - University of Islamic Sciences, Karachi * &#x60;2&#x60; - Islamic Society of North America * &#x60;3&#x60; - Muslim World League * &#x60;4&#x60; - Umm Al-Qura University, Makkah * &#x60;5&#x60; - Egyptian General Authority of Survey * &#x60;7&#x60; - Institute of Geophysics, University of Tehran * &#x60;8&#x60; - Gulf Region * &#x60;9&#x60; - Kuwait * &#x60;10&#x60; - Qatar * &#x60;12&#x60; - Majlis Ugama Islam Singapura, Singapore * &#x60;12&#x60; - Union Organization islamic de France * &#x60;13&#x60; - Diyanet İşleri Başkanlığı, Turkey * &#x60;14&#x60; - Spiritual Administration of Muslims of Russia * &#x60;15&#x60; - Moonsighting Committee Worldwide (also requires shafaq parameter) * &#x60;16&#x60; - Dubai (experimental) * &#x60;17&#x60; - Jabatan Kemajuan Islam Malaysia (JAKIM) * &#x60;18&#x60; - Tunisia * &#x60;19&#x60; - Algeria * &#x60;20&#x60; - KEMENAG - Kementerian Agama Republik Indonesia * &#x60;21&#x60; - Morocco * &#x60;22&#x60; - Comunidade Islamica de Lisboa * &#x60;23&#x60; - Ministry of Awqaf, Islamic Affairs and Holy Places, Jordan * &#x60;99&#x60; - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)  (optional, default to ._0)
     - parameter shafaq: (query) Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are &#39;&#x60;general&#39;, &#39;ahmer&#39; and &#39;abyad&#39;  (optional, default to .general)
     - parameter tune: (query) Comma Separated String of integers to offset timings returned by the API in minutes. The order is &#x60;Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight&#x60;. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.  (optional)
     - parameter school: (query) Shafi (or the standard way) or Hanafi. &lt;br /&gt;&lt;br /&gt; Possible values: * &#x60;0&#x60; - Shafi * &#x60;1&#x60; - Hanafi  (optional, default to ._0)
     - parameter midnightMode: (query) Determines the method for calculating midnight &lt;br&gt;&lt;br&gt; Possible values: * &#x60;0&#x60; - Standard (Mid Sunset to Sunrise) * &#x60;1&#x60; - Jafari (Mid Sunset to Fajr)  (optional, default to ._0)
     - parameter timezonestring: (query) A valid timezone name as specified on [https://php.net/manual/en/timezones.php](https://php.net/manual/en/timezones.php). &lt;br&gt; *If you do not specify this, we&#39;ll calcuate it using the co-ordinates you provide.*  (optional)
     - parameter latitudeAdjustmentMethod: (query) Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. &lt;br&gt;&lt;br&gt; Possible values: * &#x60;1&#x60; - Middle of the Night * &#x60;2&#x60; - One Seventh * &#x60;3&#x60; - Angle Based  (optional)
     - parameter adjustment: (query) Number of days to adjust hijri date(s).  (optional)
     - parameter iso8601: (query) Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56  (optional, default to false)
     - returns: RequestBuilder<CalendarResponse> 
     */
    open class func v1HijriCalendarByAddressYearMonthGetWithRequestBuilder(month: Double, year: Double, address: String, x7xapikey: String? = nil, annual: Bool? = nil, method: Method_v1HijriCalendarByAddressYearMonthGet? = nil, shafaq: Shafaq_v1HijriCalendarByAddressYearMonthGet? = nil, tune: String? = nil, school: School_v1HijriCalendarByAddressYearMonthGet? = nil, midnightMode: MidnightMode_v1HijriCalendarByAddressYearMonthGet? = nil, timezonestring: String? = nil, latitudeAdjustmentMethod: LatitudeAdjustmentMethod_v1HijriCalendarByAddressYearMonthGet? = nil, adjustment: Int? = nil, iso8601: Bool? = nil) -> RequestBuilder<CalendarResponse> {
        var localVariablePath = "/v1/hijriCalendarByAddress/{year}/{month}"
        let monthPreEscape = "\(APIHelper.mapValueToPathItem(month))"
        let monthPostEscape = monthPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{month}", with: monthPostEscape, options: .literal, range: nil)
        let yearPreEscape = "\(APIHelper.mapValueToPathItem(year))"
        let yearPostEscape = yearPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{year}", with: yearPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "address": (wrappedValue: address.encodeToJSON(), isExplode: true),
            "x7xapikey": (wrappedValue: x7xapikey?.encodeToJSON(), isExplode: true),
            "annual": (wrappedValue: annual?.encodeToJSON(), isExplode: true),
            "method": (wrappedValue: method?.encodeToJSON(), isExplode: true),
            "shafaq": (wrappedValue: shafaq?.encodeToJSON(), isExplode: true),
            "tune": (wrappedValue: tune?.encodeToJSON(), isExplode: true),
            "school": (wrappedValue: school?.encodeToJSON(), isExplode: true),
            "midnightMode": (wrappedValue: midnightMode?.encodeToJSON(), isExplode: true),
            "timezonestring": (wrappedValue: timezonestring?.encodeToJSON(), isExplode: true),
            "latitudeAdjustmentMethod": (wrappedValue: latitudeAdjustmentMethod?.encodeToJSON(), isExplode: true),
            "adjustment": (wrappedValue: adjustment?.encodeToJSON(), isExplode: true),
            "iso8601": (wrappedValue: iso8601?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CalendarResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter method
     */
    public enum Method_v1HijriCalendarByCityYearMonthGet: Double, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
        case _5 = 5
        case _6 = 6
        case _7 = 7
        case _8 = 8
        case _9 = 9
        case _10 = 10
        case _11 = 11
        case _12 = 12
        case _13 = 13
        case _14 = 14
        case _15 = 15
        case _16 = 16
        case _17 = 17
        case _18 = 18
        case _19 = 19
        case _20 = 20
        case _21 = 21
        case _22 = 22
        case _23 = 23
        case _99 = 99
    }

    /**
     * enum for parameter shafaq
     */
    public enum Shafaq_v1HijriCalendarByCityYearMonthGet: String, CaseIterable {
        case general = "general"
        case ahmer = "ahmer"
        case abyad = "abyad"
    }

    /**
     * enum for parameter school
     */
    public enum School_v1HijriCalendarByCityYearMonthGet: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
    }

    /**
     * enum for parameter midnightMode
     */
    public enum MidnightMode_v1HijriCalendarByCityYearMonthGet: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
    }

    /**
     * enum for parameter latitudeAdjustmentMethod
     */
    public enum LatitudeAdjustmentMethod_v1HijriCalendarByCityYearMonthGet: Int, CaseIterable {
        case _1 = 1
        case _2 = 2
        case _3 = 3
    }

    /**
     Prayer Times Hijri Calendar by city
     
     - parameter month: (path) A gregroian or hijri calendar month  
     - parameter year: (path) A gregorian or hijri calendar year  
     - parameter city: (query) A city name  
     - parameter country: (query) A country name or 2 character alpha ISO 3166 code  
     - parameter state: (query) State or province. A state name or abbreviation. Examples: Colorado / CO / Punjab / Bengal  (optional)
     - parameter x7xapikey: (query) An API key from https://7x.ax to geocode the address, city and country. If you do not provide one the response will mask the geocoded co-ordinates. (optional)
     - parameter annual: (query) If true, month parameter will be ignored and the calendar for the entire year will be returned  (optional, default to false)
     - parameter method: (query) A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-23 and 99, as specified below: &lt;br&gt;&lt;br&gt; Possible values: * &#x60;0&#x60; - Jafari / Shia Ithna-Ashari * &#x60;1&#x60; - University of Islamic Sciences, Karachi * &#x60;2&#x60; - Islamic Society of North America * &#x60;3&#x60; - Muslim World League * &#x60;4&#x60; - Umm Al-Qura University, Makkah * &#x60;5&#x60; - Egyptian General Authority of Survey * &#x60;7&#x60; - Institute of Geophysics, University of Tehran * &#x60;8&#x60; - Gulf Region * &#x60;9&#x60; - Kuwait * &#x60;10&#x60; - Qatar * &#x60;12&#x60; - Majlis Ugama Islam Singapura, Singapore * &#x60;12&#x60; - Union Organization islamic de France * &#x60;13&#x60; - Diyanet İşleri Başkanlığı, Turkey * &#x60;14&#x60; - Spiritual Administration of Muslims of Russia * &#x60;15&#x60; - Moonsighting Committee Worldwide (also requires shafaq parameter) * &#x60;16&#x60; - Dubai (experimental) * &#x60;17&#x60; - Jabatan Kemajuan Islam Malaysia (JAKIM) * &#x60;18&#x60; - Tunisia * &#x60;19&#x60; - Algeria * &#x60;20&#x60; - KEMENAG - Kementerian Agama Republik Indonesia * &#x60;21&#x60; - Morocco * &#x60;22&#x60; - Comunidade Islamica de Lisboa * &#x60;23&#x60; - Ministry of Awqaf, Islamic Affairs and Holy Places, Jordan * &#x60;99&#x60; - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)  (optional, default to ._0)
     - parameter shafaq: (query) Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are &#39;&#x60;general&#39;, &#39;ahmer&#39; and &#39;abyad&#39;  (optional, default to .general)
     - parameter tune: (query) Comma Separated String of integers to offset timings returned by the API in minutes. The order is &#x60;Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight&#x60;. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.  (optional)
     - parameter school: (query) Shafi (or the standard way) or Hanafi. &lt;br /&gt;&lt;br /&gt; Possible values: * &#x60;0&#x60; - Shafi * &#x60;1&#x60; - Hanafi  (optional, default to ._0)
     - parameter midnightMode: (query) Determines the method for calculating midnight &lt;br&gt;&lt;br&gt; Possible values: * &#x60;0&#x60; - Standard (Mid Sunset to Sunrise) * &#x60;1&#x60; - Jafari (Mid Sunset to Fajr)  (optional, default to ._0)
     - parameter timezonestring: (query) A valid timezone name as specified on [https://php.net/manual/en/timezones.php](https://php.net/manual/en/timezones.php). &lt;br&gt; *If you do not specify this, we&#39;ll calcuate it using the co-ordinates you provide.*  (optional)
     - parameter latitudeAdjustmentMethod: (query) Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. &lt;br&gt;&lt;br&gt; Possible values: * &#x60;1&#x60; - Middle of the Night * &#x60;2&#x60; - One Seventh * &#x60;3&#x60; - Angle Based  (optional)
     - parameter adjustment: (query) Number of days to adjust hijri date(s).  (optional)
     - parameter iso8601: (query) Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56  (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1HijriCalendarByCityYearMonthGet(month: Double, year: Double, city: String, country: String, state: String? = nil, x7xapikey: String? = nil, annual: Bool? = nil, method: Method_v1HijriCalendarByCityYearMonthGet? = nil, shafaq: Shafaq_v1HijriCalendarByCityYearMonthGet? = nil, tune: String? = nil, school: School_v1HijriCalendarByCityYearMonthGet? = nil, midnightMode: MidnightMode_v1HijriCalendarByCityYearMonthGet? = nil, timezonestring: String? = nil, latitudeAdjustmentMethod: LatitudeAdjustmentMethod_v1HijriCalendarByCityYearMonthGet? = nil, adjustment: Int? = nil, iso8601: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CalendarResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return v1HijriCalendarByCityYearMonthGetWithRequestBuilder(month: month, year: year, city: city, country: country, state: state, x7xapikey: x7xapikey, annual: annual, method: method, shafaq: shafaq, tune: tune, school: school, midnightMode: midnightMode, timezonestring: timezonestring, latitudeAdjustmentMethod: latitudeAdjustmentMethod, adjustment: adjustment, iso8601: iso8601).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Prayer Times Hijri Calendar by city
     - GET /v1/hijriCalendarByCity/{year}/{month}
     - Returns all prayer times for a specific Hijri calendar month by City.
     - parameter month: (path) A gregroian or hijri calendar month  
     - parameter year: (path) A gregorian or hijri calendar year  
     - parameter city: (query) A city name  
     - parameter country: (query) A country name or 2 character alpha ISO 3166 code  
     - parameter state: (query) State or province. A state name or abbreviation. Examples: Colorado / CO / Punjab / Bengal  (optional)
     - parameter x7xapikey: (query) An API key from https://7x.ax to geocode the address, city and country. If you do not provide one the response will mask the geocoded co-ordinates. (optional)
     - parameter annual: (query) If true, month parameter will be ignored and the calendar for the entire year will be returned  (optional, default to false)
     - parameter method: (query) A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-23 and 99, as specified below: &lt;br&gt;&lt;br&gt; Possible values: * &#x60;0&#x60; - Jafari / Shia Ithna-Ashari * &#x60;1&#x60; - University of Islamic Sciences, Karachi * &#x60;2&#x60; - Islamic Society of North America * &#x60;3&#x60; - Muslim World League * &#x60;4&#x60; - Umm Al-Qura University, Makkah * &#x60;5&#x60; - Egyptian General Authority of Survey * &#x60;7&#x60; - Institute of Geophysics, University of Tehran * &#x60;8&#x60; - Gulf Region * &#x60;9&#x60; - Kuwait * &#x60;10&#x60; - Qatar * &#x60;12&#x60; - Majlis Ugama Islam Singapura, Singapore * &#x60;12&#x60; - Union Organization islamic de France * &#x60;13&#x60; - Diyanet İşleri Başkanlığı, Turkey * &#x60;14&#x60; - Spiritual Administration of Muslims of Russia * &#x60;15&#x60; - Moonsighting Committee Worldwide (also requires shafaq parameter) * &#x60;16&#x60; - Dubai (experimental) * &#x60;17&#x60; - Jabatan Kemajuan Islam Malaysia (JAKIM) * &#x60;18&#x60; - Tunisia * &#x60;19&#x60; - Algeria * &#x60;20&#x60; - KEMENAG - Kementerian Agama Republik Indonesia * &#x60;21&#x60; - Morocco * &#x60;22&#x60; - Comunidade Islamica de Lisboa * &#x60;23&#x60; - Ministry of Awqaf, Islamic Affairs and Holy Places, Jordan * &#x60;99&#x60; - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)  (optional, default to ._0)
     - parameter shafaq: (query) Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are &#39;&#x60;general&#39;, &#39;ahmer&#39; and &#39;abyad&#39;  (optional, default to .general)
     - parameter tune: (query) Comma Separated String of integers to offset timings returned by the API in minutes. The order is &#x60;Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight&#x60;. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.  (optional)
     - parameter school: (query) Shafi (or the standard way) or Hanafi. &lt;br /&gt;&lt;br /&gt; Possible values: * &#x60;0&#x60; - Shafi * &#x60;1&#x60; - Hanafi  (optional, default to ._0)
     - parameter midnightMode: (query) Determines the method for calculating midnight &lt;br&gt;&lt;br&gt; Possible values: * &#x60;0&#x60; - Standard (Mid Sunset to Sunrise) * &#x60;1&#x60; - Jafari (Mid Sunset to Fajr)  (optional, default to ._0)
     - parameter timezonestring: (query) A valid timezone name as specified on [https://php.net/manual/en/timezones.php](https://php.net/manual/en/timezones.php). &lt;br&gt; *If you do not specify this, we&#39;ll calcuate it using the co-ordinates you provide.*  (optional)
     - parameter latitudeAdjustmentMethod: (query) Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. &lt;br&gt;&lt;br&gt; Possible values: * &#x60;1&#x60; - Middle of the Night * &#x60;2&#x60; - One Seventh * &#x60;3&#x60; - Angle Based  (optional)
     - parameter adjustment: (query) Number of days to adjust hijri date(s).  (optional)
     - parameter iso8601: (query) Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56  (optional, default to false)
     - returns: RequestBuilder<CalendarResponse> 
     */
    open class func v1HijriCalendarByCityYearMonthGetWithRequestBuilder(month: Double, year: Double, city: String, country: String, state: String? = nil, x7xapikey: String? = nil, annual: Bool? = nil, method: Method_v1HijriCalendarByCityYearMonthGet? = nil, shafaq: Shafaq_v1HijriCalendarByCityYearMonthGet? = nil, tune: String? = nil, school: School_v1HijriCalendarByCityYearMonthGet? = nil, midnightMode: MidnightMode_v1HijriCalendarByCityYearMonthGet? = nil, timezonestring: String? = nil, latitudeAdjustmentMethod: LatitudeAdjustmentMethod_v1HijriCalendarByCityYearMonthGet? = nil, adjustment: Int? = nil, iso8601: Bool? = nil) -> RequestBuilder<CalendarResponse> {
        var localVariablePath = "/v1/hijriCalendarByCity/{year}/{month}"
        let monthPreEscape = "\(APIHelper.mapValueToPathItem(month))"
        let monthPostEscape = monthPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{month}", with: monthPostEscape, options: .literal, range: nil)
        let yearPreEscape = "\(APIHelper.mapValueToPathItem(year))"
        let yearPostEscape = yearPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{year}", with: yearPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "city": (wrappedValue: city.encodeToJSON(), isExplode: true),
            "country": (wrappedValue: country.encodeToJSON(), isExplode: true),
            "state": (wrappedValue: state?.encodeToJSON(), isExplode: true),
            "x7xapikey": (wrappedValue: x7xapikey?.encodeToJSON(), isExplode: true),
            "annual": (wrappedValue: annual?.encodeToJSON(), isExplode: true),
            "method": (wrappedValue: method?.encodeToJSON(), isExplode: true),
            "shafaq": (wrappedValue: shafaq?.encodeToJSON(), isExplode: true),
            "tune": (wrappedValue: tune?.encodeToJSON(), isExplode: true),
            "school": (wrappedValue: school?.encodeToJSON(), isExplode: true),
            "midnightMode": (wrappedValue: midnightMode?.encodeToJSON(), isExplode: true),
            "timezonestring": (wrappedValue: timezonestring?.encodeToJSON(), isExplode: true),
            "latitudeAdjustmentMethod": (wrappedValue: latitudeAdjustmentMethod?.encodeToJSON(), isExplode: true),
            "adjustment": (wrappedValue: adjustment?.encodeToJSON(), isExplode: true),
            "iso8601": (wrappedValue: iso8601?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CalendarResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter method
     */
    public enum Method_v1HijriCalendarYearMonthGet: Double, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
        case _5 = 5
        case _6 = 6
        case _7 = 7
        case _8 = 8
        case _9 = 9
        case _10 = 10
        case _11 = 11
        case _12 = 12
        case _13 = 13
        case _14 = 14
        case _15 = 15
        case _16 = 16
        case _17 = 17
        case _18 = 18
        case _19 = 19
        case _20 = 20
        case _21 = 21
        case _22 = 22
        case _23 = 23
        case _99 = 99
    }

    /**
     * enum for parameter shafaq
     */
    public enum Shafaq_v1HijriCalendarYearMonthGet: String, CaseIterable {
        case general = "general"
        case ahmer = "ahmer"
        case abyad = "abyad"
    }

    /**
     * enum for parameter school
     */
    public enum School_v1HijriCalendarYearMonthGet: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
    }

    /**
     * enum for parameter midnightMode
     */
    public enum MidnightMode_v1HijriCalendarYearMonthGet: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
    }

    /**
     * enum for parameter latitudeAdjustmentMethod
     */
    public enum LatitudeAdjustmentMethod_v1HijriCalendarYearMonthGet: Int, CaseIterable {
        case _1 = 1
        case _2 = 2
        case _3 = 3
    }

    /**
     Hijri Prayer Times Calendar
     
     - parameter month: (path) A gregroian or hijri calendar month  
     - parameter year: (path) A gregorian or hijri calendar year  
     - parameter latitude: (query) The decimal value for the latitude co-ordinate of the location you want the time computed for.  
     - parameter longitude: (query) The decimal value for the longitude co-ordinate of the location you want the time computed for.  
     - parameter annual: (query) If true, month parameter will be ignored and the calendar for the entire year will be returned  (optional, default to false)
     - parameter method: (query) A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-23 and 99, as specified below: &lt;br&gt;&lt;br&gt; Possible values: * &#x60;0&#x60; - Jafari / Shia Ithna-Ashari * &#x60;1&#x60; - University of Islamic Sciences, Karachi * &#x60;2&#x60; - Islamic Society of North America * &#x60;3&#x60; - Muslim World League * &#x60;4&#x60; - Umm Al-Qura University, Makkah * &#x60;5&#x60; - Egyptian General Authority of Survey * &#x60;7&#x60; - Institute of Geophysics, University of Tehran * &#x60;8&#x60; - Gulf Region * &#x60;9&#x60; - Kuwait * &#x60;10&#x60; - Qatar * &#x60;12&#x60; - Majlis Ugama Islam Singapura, Singapore * &#x60;12&#x60; - Union Organization islamic de France * &#x60;13&#x60; - Diyanet İşleri Başkanlığı, Turkey * &#x60;14&#x60; - Spiritual Administration of Muslims of Russia * &#x60;15&#x60; - Moonsighting Committee Worldwide (also requires shafaq parameter) * &#x60;16&#x60; - Dubai (experimental) * &#x60;17&#x60; - Jabatan Kemajuan Islam Malaysia (JAKIM) * &#x60;18&#x60; - Tunisia * &#x60;19&#x60; - Algeria * &#x60;20&#x60; - KEMENAG - Kementerian Agama Republik Indonesia * &#x60;21&#x60; - Morocco * &#x60;22&#x60; - Comunidade Islamica de Lisboa * &#x60;23&#x60; - Ministry of Awqaf, Islamic Affairs and Holy Places, Jordan * &#x60;99&#x60; - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)  (optional, default to ._0)
     - parameter shafaq: (query) Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are &#39;&#x60;general&#39;, &#39;ahmer&#39; and &#39;abyad&#39;  (optional, default to .general)
     - parameter tune: (query) Comma Separated String of integers to offset timings returned by the API in minutes. The order is &#x60;Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight&#x60;. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.  (optional)
     - parameter school: (query) Shafi (or the standard way) or Hanafi. &lt;br /&gt;&lt;br /&gt; Possible values: * &#x60;0&#x60; - Shafi * &#x60;1&#x60; - Hanafi  (optional, default to ._0)
     - parameter midnightMode: (query) Determines the method for calculating midnight &lt;br&gt;&lt;br&gt; Possible values: * &#x60;0&#x60; - Standard (Mid Sunset to Sunrise) * &#x60;1&#x60; - Jafari (Mid Sunset to Fajr)  (optional, default to ._0)
     - parameter timezonestring: (query) A valid timezone name as specified on [https://php.net/manual/en/timezones.php](https://php.net/manual/en/timezones.php). &lt;br&gt; *If you do not specify this, we&#39;ll calcuate it using the co-ordinates you provide.*  (optional)
     - parameter latitudeAdjustmentMethod: (query) Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. &lt;br&gt;&lt;br&gt; Possible values: * &#x60;1&#x60; - Middle of the Night * &#x60;2&#x60; - One Seventh * &#x60;3&#x60; - Angle Based  (optional)
     - parameter adjustment: (query) Number of days to adjust hijri date(s).  (optional)
     - parameter iso8601: (query) Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56  (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1HijriCalendarYearMonthGet(month: Double, year: Double, latitude: Double, longitude: Double, annual: Bool? = nil, method: Method_v1HijriCalendarYearMonthGet? = nil, shafaq: Shafaq_v1HijriCalendarYearMonthGet? = nil, tune: String? = nil, school: School_v1HijriCalendarYearMonthGet? = nil, midnightMode: MidnightMode_v1HijriCalendarYearMonthGet? = nil, timezonestring: String? = nil, latitudeAdjustmentMethod: LatitudeAdjustmentMethod_v1HijriCalendarYearMonthGet? = nil, adjustment: Int? = nil, iso8601: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CalendarResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return v1HijriCalendarYearMonthGetWithRequestBuilder(month: month, year: year, latitude: latitude, longitude: longitude, annual: annual, method: method, shafaq: shafaq, tune: tune, school: school, midnightMode: midnightMode, timezonestring: timezonestring, latitudeAdjustmentMethod: latitudeAdjustmentMethod, adjustment: adjustment, iso8601: iso8601).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Hijri Prayer Times Calendar
     - GET /v1/hijriCalendar/{year}/{month}
     - Returns all prayer times for a specific Hijri calendar month.
     - parameter month: (path) A gregroian or hijri calendar month  
     - parameter year: (path) A gregorian or hijri calendar year  
     - parameter latitude: (query) The decimal value for the latitude co-ordinate of the location you want the time computed for.  
     - parameter longitude: (query) The decimal value for the longitude co-ordinate of the location you want the time computed for.  
     - parameter annual: (query) If true, month parameter will be ignored and the calendar for the entire year will be returned  (optional, default to false)
     - parameter method: (query) A prayer times calculation method. Methods identify various schools of thought about how to compute the timings. If not specified, it defaults to the closest authority based on the location or co-ordinates specified in the API call. This parameter accepts values from 0-23 and 99, as specified below: &lt;br&gt;&lt;br&gt; Possible values: * &#x60;0&#x60; - Jafari / Shia Ithna-Ashari * &#x60;1&#x60; - University of Islamic Sciences, Karachi * &#x60;2&#x60; - Islamic Society of North America * &#x60;3&#x60; - Muslim World League * &#x60;4&#x60; - Umm Al-Qura University, Makkah * &#x60;5&#x60; - Egyptian General Authority of Survey * &#x60;7&#x60; - Institute of Geophysics, University of Tehran * &#x60;8&#x60; - Gulf Region * &#x60;9&#x60; - Kuwait * &#x60;10&#x60; - Qatar * &#x60;12&#x60; - Majlis Ugama Islam Singapura, Singapore * &#x60;12&#x60; - Union Organization islamic de France * &#x60;13&#x60; - Diyanet İşleri Başkanlığı, Turkey * &#x60;14&#x60; - Spiritual Administration of Muslims of Russia * &#x60;15&#x60; - Moonsighting Committee Worldwide (also requires shafaq parameter) * &#x60;16&#x60; - Dubai (experimental) * &#x60;17&#x60; - Jabatan Kemajuan Islam Malaysia (JAKIM) * &#x60;18&#x60; - Tunisia * &#x60;19&#x60; - Algeria * &#x60;20&#x60; - KEMENAG - Kementerian Agama Republik Indonesia * &#x60;21&#x60; - Morocco * &#x60;22&#x60; - Comunidade Islamica de Lisboa * &#x60;23&#x60; - Ministry of Awqaf, Islamic Affairs and Holy Places, Jordan * &#x60;99&#x60; - Custom. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods)  (optional, default to ._0)
     - parameter shafaq: (query) Which Shafaq to use if the method is Moonsighting Commitee Worldwide. Acceptable options are &#39;&#x60;general&#39;, &#39;ahmer&#39; and &#39;abyad&#39;  (optional, default to .general)
     - parameter tune: (query) Comma Separated String of integers to offset timings returned by the API in minutes. The order is &#x60;Imsak,Fajr,Sunrise,Dhuhr,Asr,Maghrib,Sunset,Isha,Midnight&#x60;. See [https://aladhan.com/calculation-methods](https://aladhan.com/calculation-methods) for more details.  (optional)
     - parameter school: (query) Shafi (or the standard way) or Hanafi. &lt;br /&gt;&lt;br /&gt; Possible values: * &#x60;0&#x60; - Shafi * &#x60;1&#x60; - Hanafi  (optional, default to ._0)
     - parameter midnightMode: (query) Determines the method for calculating midnight &lt;br&gt;&lt;br&gt; Possible values: * &#x60;0&#x60; - Standard (Mid Sunset to Sunrise) * &#x60;1&#x60; - Jafari (Mid Sunset to Fajr)  (optional, default to ._0)
     - parameter timezonestring: (query) A valid timezone name as specified on [https://php.net/manual/en/timezones.php](https://php.net/manual/en/timezones.php). &lt;br&gt; *If you do not specify this, we&#39;ll calcuate it using the co-ordinates you provide.*  (optional)
     - parameter latitudeAdjustmentMethod: (query) Method for adjusting times at higher latitudes. For example, if you are checking timings in the UK or Sweden. &lt;br&gt;&lt;br&gt; Possible values: * &#x60;1&#x60; - Middle of the Night * &#x60;2&#x60; - One Seventh * &#x60;3&#x60; - Angle Based  (optional)
     - parameter adjustment: (query) Number of days to adjust hijri date(s).  (optional)
     - parameter iso8601: (query) Whether to return the prayer times in the iso8601 format. Example: true will return 2020-07-01T02:56:00+01:00 instead of 02:56  (optional, default to false)
     - returns: RequestBuilder<CalendarResponse> 
     */
    open class func v1HijriCalendarYearMonthGetWithRequestBuilder(month: Double, year: Double, latitude: Double, longitude: Double, annual: Bool? = nil, method: Method_v1HijriCalendarYearMonthGet? = nil, shafaq: Shafaq_v1HijriCalendarYearMonthGet? = nil, tune: String? = nil, school: School_v1HijriCalendarYearMonthGet? = nil, midnightMode: MidnightMode_v1HijriCalendarYearMonthGet? = nil, timezonestring: String? = nil, latitudeAdjustmentMethod: LatitudeAdjustmentMethod_v1HijriCalendarYearMonthGet? = nil, adjustment: Int? = nil, iso8601: Bool? = nil) -> RequestBuilder<CalendarResponse> {
        var localVariablePath = "/v1/hijriCalendar/{year}/{month}"
        let monthPreEscape = "\(APIHelper.mapValueToPathItem(month))"
        let monthPostEscape = monthPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{month}", with: monthPostEscape, options: .literal, range: nil)
        let yearPreEscape = "\(APIHelper.mapValueToPathItem(year))"
        let yearPostEscape = yearPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{year}", with: yearPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "latitude": (wrappedValue: latitude.encodeToJSON(), isExplode: true),
            "longitude": (wrappedValue: longitude.encodeToJSON(), isExplode: true),
            "annual": (wrappedValue: annual?.encodeToJSON(), isExplode: true),
            "method": (wrappedValue: method?.encodeToJSON(), isExplode: true),
            "shafaq": (wrappedValue: shafaq?.encodeToJSON(), isExplode: true),
            "tune": (wrappedValue: tune?.encodeToJSON(), isExplode: true),
            "school": (wrappedValue: school?.encodeToJSON(), isExplode: true),
            "midnightMode": (wrappedValue: midnightMode?.encodeToJSON(), isExplode: true),
            "timezonestring": (wrappedValue: timezonestring?.encodeToJSON(), isExplode: true),
            "latitudeAdjustmentMethod": (wrappedValue: latitudeAdjustmentMethod?.encodeToJSON(), isExplode: true),
            "adjustment": (wrappedValue: adjustment?.encodeToJSON(), isExplode: true),
            "iso8601": (wrappedValue: iso8601?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CalendarResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
