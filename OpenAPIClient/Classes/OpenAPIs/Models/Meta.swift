//
// Meta.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Meta: Codable, JSONEncodable, Hashable {

    public var latitude: Double?
    public var longitude: Double?
    /** Timezone for all returned times  */
    public var timezone: String?
    public var method: Method?
    public var latitudeAdjustmentMethod: String?
    public var midnightMode: String?
    public var school: String?
    public var offset: Offset?

    public init(latitude: Double? = nil, longitude: Double? = nil, timezone: String? = nil, method: Method? = nil, latitudeAdjustmentMethod: String? = nil, midnightMode: String? = nil, school: String? = nil, offset: Offset? = nil) {
        self.latitude = latitude
        self.longitude = longitude
        self.timezone = timezone
        self.method = method
        self.latitudeAdjustmentMethod = latitudeAdjustmentMethod
        self.midnightMode = midnightMode
        self.school = school
        self.offset = offset
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case latitude
        case longitude
        case timezone
        case method
        case latitudeAdjustmentMethod
        case midnightMode
        case school
        case offset
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(latitude, forKey: .latitude)
        try container.encodeIfPresent(longitude, forKey: .longitude)
        try container.encodeIfPresent(timezone, forKey: .timezone)
        try container.encodeIfPresent(method, forKey: .method)
        try container.encodeIfPresent(latitudeAdjustmentMethod, forKey: .latitudeAdjustmentMethod)
        try container.encodeIfPresent(midnightMode, forKey: .midnightMode)
        try container.encodeIfPresent(school, forKey: .school)
        try container.encodeIfPresent(offset, forKey: .offset)
    }
}

